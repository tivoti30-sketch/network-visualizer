// ===== GLOBAL VARIABLES =====
let currentView = 'main';
let commandHistory = [];
let networkPaths = {};
let appStartTime = new Date();
let zoomLevel = 1;
let currentVisualization = null;

// ===== DOM ELEMENTS =====
const elements = {
    form: document.getElementById('commandForm'),
    commandInput: document.getElementById('commandInput'),
    rawOutputDiv: document.getElementById('rawOutput'),
    visualizationDiv: document.getElementById('visualization'),
    historySection: document.getElementById('historySection'),
    pathsSection: document.getElementById('pathsSection'),
    infoSection: document.getElementById('infoSection'),
    mainSection: document.getElementById('mainSection'),
    historyList: document.getElementById('historyList'),
    pathsContainer: document.getElementById('pathsContainer'),
    showHistoryBtn: document.getElementById('showHistoryBtn'),
    showPathsBtn: document.getElementById('showPathsBtn'),
    showInfoBtn: document.getElementById('showInfoBtn'),
    mainViewBtn: document.getElementById('mainViewBtn'),
    refreshHistoryBtn: document.getElementById('refreshHistoryBtn'),
    clearHistoryBtn: document.getElementById('clearHistoryBtn'),
    refreshPathsBtn: document.getElementById('refreshPathsBtn'),
    exportPathsBtn: document.getElementById('exportPathsBtn'),
    copyOutputBtn: document.getElementById('copyOutputBtn'),
    zoomInBtn: document.getElementById('zoomInBtn'),
    zoomOutBtn: document.getElementById('zoomOutBtn'),
    resetViewBtn: document.getElementById('resetViewBtn'),
    confirmModal: document.getElementById('confirmModal'),
    modalCloseBtn: document.getElementById('modalCloseBtn'),
    modalCancelBtn: document.getElementById('modalCancelBtn'),
    modalConfirmBtn: document.getElementById('modalConfirmBtn'),
    loadingOverlay: document.getElementById('loadingOverlay'),
    loadingDetails: document.getElementById('loadingDetails'),
    historyCount: document.getElementById('historyCount'),
    pathsCount: document.getElementById('pathsCount'),
    totalTargets: document.getElementById('totalTargets'),
    totalHops: document.getElementById('totalHops'),
    totalIPs: document.getElementById('totalIPs'),
    totalRequests: document.getElementById('totalRequests'),
    dbSize: document.getElementById('dbSize'),
    appUptime: document.getElementById('appUptime'),
    systemStatus: document.getElementById('systemStatus'),
    lastUpdate: document.getElementById('lastUpdate'),
    frontendStatus: document.getElementById('frontendStatus'),
    commandName: document.getElementById('commandName'),
    executionTime: document.getElementById('executionTime'),
    historyFilter: document.getElementById('historyFilter'),
    historySort: document.getElementById('historySort'),
    quickTraceroute: document.getElementById('quickTraceroute'),
    quickPing: document.getElementById('quickPing'),
    quickScan: document.getElementById('quickScan')
};

// ===== INITIALIZATION =====
document.addEventListener('DOMContentLoaded', function() {
    initializeApplication();
    setupEventListeners();
    startBackgroundTasks();
});

function initializeApplication() {
        
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    elements.lastUpdate.textContent = new Date().getFullYear();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadNetworkInfo();
    loadHistory();
    loadPaths();
    updateUptime();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    elements.frontendStatus.textContent = 'üü¢ Frontend';
    elements.frontendStatus.classList.add('online');
    
    }

function setupEventListeners() {
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    elements.form.addEventListener('submit', handleCommandSubmit);
    
    // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–æ–≤
    elements.showHistoryBtn.addEventListener('click', () => showView('history'));
    elements.showPathsBtn.addEventListener('click', () => showView('paths'));
    elements.showInfoBtn.addEventListener('click', () => showView('info'));
    elements.mainViewBtn.addEventListener('click', () => showView('main'));
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π
    elements.refreshHistoryBtn.addEventListener('click', loadHistory);
    elements.clearHistoryBtn.addEventListener('click', showClearHistoryModal);
    elements.historyFilter.addEventListener('change', filterHistory);
    elements.historySort.addEventListener('change', filterHistory);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç—è–º–∏
    elements.refreshPathsBtn.addEventListener('click', loadPaths);
    elements.exportPathsBtn.addEventListener('click', exportPaths);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    elements.zoomInBtn.addEventListener('click', zoomIn);
    elements.zoomOutBtn.addEventListener('click', zoomOut);
    elements.resetViewBtn.addEventListener('click', resetView);
    elements.copyOutputBtn.addEventListener('click', copyOutputToClipboard);
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    elements.modalCloseBtn.addEventListener('click', closeModal);
    elements.modalCancelBtn.addEventListener('click', closeModal);
    elements.modalConfirmBtn.addEventListener('click', clearHistory);
    
    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    elements.quickTraceroute.addEventListener('click', () => quickAction('traceroute'));
    elements.quickPing.addEventListener('click', () => quickAction('ping'));
    elements.quickScan.addEventListener('click', () => quickAction('nmap'));
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', handleKeyboardShortcuts);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥
    document.querySelectorAll('.example-cmd').forEach(code => {
        code.addEventListener('click', function() {
            elements.commandInput.value = this.textContent;
            elements.commandInput.focus();
        });
    });
    
    }

function startBackgroundTasks() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(updateUptime, 1000);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    setInterval(checkSystemStatus, 30000);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setInterval(autoSaveState, 60000);
}

// ===== VIEW MANAGEMENT =====
function showView(view) {
    currentView = view;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.content-section').forEach(section => {
        section.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
    const sectionId = view + 'Section';
    if (elements[sectionId]) {
        elements[sectionId].style.display = 'block';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.view-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    const activeBtn = document.querySelector(`[data-view="${view}"]`);
    if (activeBtn) {
        activeBtn.classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (view === 'history') {
        loadHistory();
    } else if (view === 'paths') {
        loadPaths();
    } else if (view === 'info') {
        updateInfoStats();
    }
    
    }

// ===== COMMAND EXECUTION =====
async function handleCommandSubmit(event) {
    event.preventDefault();
    
    const command = elements.commandInput.value.trim();
    if (!command) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É');
        return;
    }
    
    await executeCommand(command);
}

async function executeCommand(command) {
    showLoading(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${command}`);
    
    try {
        const startTime = Date.now();
        const response = await fetch('/api/run_command', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ command })
        });

        const data = await response.json();
        const executionTime = Date.now() - startTime;

        if (!response.ok) {
            throw new Error(data.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        updateCommandMeta(command, executionTime);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        displayRawOutput(data);
        visualizeCommandData(data);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —ç—Ç–æ traceroute
        if (data.command_type === 'traceroute') {
            setTimeout(loadHistory, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
        }

        hideLoading();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
        showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
        hideLoading();
    }
}

function updateCommandMeta(command, executionTime) {
    elements.commandName.textContent = command;
    elements.executionTime.textContent = `‚è±Ô∏è ${executionTime}ms`;
}

// ===== DATA VISUALIZATION =====
function displayRawOutput(data) {
    if (data.raw_stdout) {
        elements.rawOutputDiv.textContent = data.raw_stdout;
    } else if (data.raw_stderr) {
        elements.rawOutputDiv.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${data.raw_stderr}</div>`;
    } else {
        elements.rawOutputDiv.textContent = '–ù–µ—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã.';
    }
}

function visualizeCommandData(data) {
    if (!data.parsed_data) {
        elements.visualizationDiv.innerHTML = `
            <div class="placeholder">
                <div class="placeholder-icon">üìä</div>
                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</p>
                <small>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ</small>
            </div>
        `;
        return;
    }

    switch (data.command_type) {
        case 'traceroute':
            visualizeTraceroute(data.parsed_data, data.command);
            break;
        case 'ping':
            visualizePing(data.parsed_data);
            break;
        case 'nmap':
        case 'dns':
        case 'netstat':
            visualizeRawData(data.parsed_data, data.command_type);
            break;
        default:
            elements.visualizationDiv.innerHTML = `
                <div class="info">
                    ‚ÑπÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
                </div>
            `;
    }
}

function visualizeTraceroute(hopsData, command) {
    if (!hopsData || hopsData.length === 0) {
        elements.visualizationDiv.innerHTML = `
            <div class="placeholder">
                <div class="placeholder-icon">üîç</div>
                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ traceroute</p>
                <small>–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</small>
            </div>
        `;
        return;
    }

    const width = elements.visualizationDiv.clientWidth;
    const height = Math.max(400, hopsData.length * 60);
    const nodeRadius = 15;
    const horizontalSpacing = width / (hopsData.length + 1);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    elements.visualizationDiv.innerHTML = '';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    currentVisualization = { type: 'traceroute', data: hopsData };

    const container = d3.select("#visualization")
        .append("div")
        .attr("class", "visualization-container");

    // –°–æ–∑–¥–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç
    const svg = container.append("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("class", "traceroute-svg")
        .style("transform", `scale(${zoomLevel})`)
        .style("transform-origin", "center center");

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const target = command.split(' ').pop();
    container.append("div")
        .attr("class", "source-info")
        .html(`
            <h4>üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞</h4>
            <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> –í–∞—à —Å–µ—Ä–≤–µ—Ä</p>
            <p><strong>–¶–µ–ª—å:</strong> ${target}</p>
            <p><strong>–•–æ–ø–æ–≤:</strong> ${hopsData.length}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleTimeString()}</p>
        `);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const xScale = d3.scalePoint()
        .domain(hopsData.map((d, i) => i))
        .range([horizontalSpacing, width - horizontalSpacing]);

    const yScale = d3.scalePoint()
        .domain([0, 1])
        .range([height / 3, 2 * height / 3]);

    // –†–∏—Å—É–µ–º —Å–≤—è–∑–∏
    const links = hopsData.slice(1).map((d, i) => ({
        source: hopsData[i],
        target: hopsData[i + 1]
    }));

    svg.selectAll(".link")
        .data(links)
        .enter().append("line")
        .attr("class", "link")
        .attr("x1", (d, i) => xScale(i))
        .attr("y1", yScale(0))
        .attr("x2", (d, i) => xScale(i + 1))
        .attr("y2", yScale(0))
        .attr("stroke-width", 2)
        .attr("stroke", "#3498db")
        .attr("stroke-dasharray", "5,5");

    // –†–∏—Å—É–µ–º —É–∑–ª—ã
    const nodes = svg.selectAll(".node")
        .data(hopsData)
        .enter().append("g")
        .attr("class", "node")
        .attr("transform", (d, i) => `translate(${xScale(i)}, ${yScale(0)})`)
        .on("mouseover", function(event, d) {
            showNodeInfo(event, d);
        })
        .on("mouseout", hideNodeInfo);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥–∏
    nodes.append("circle")
        .attr("r", nodeRadius)
        .attr("fill", (d, i) => {
            if (i === 0) return "#e74c3c";
            if (i === hopsData.length - 1) return "#27ae60";
            return "#3498db";
        })
        .attr("stroke", (d, i) => {
            if (i === 0) return "#c0392b";
            if (i === hopsData.length - 1) return "#229954";
            return "#2980b9";
        })
        .attr("stroke-width", 2);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
    nodes.append("text")
        .attr("class", "node-icon")
        .attr("text-anchor", "middle")
        .attr("dy", "0.35em")
        .attr("font-size", "12px")
        .attr("fill", "white")
        .text((d, i) => {
            if (i === 0) return "üè†";
            if (i === hopsData.length - 1) return "üéØ";
            return "üîó";
        });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    nodes.append("text")
        .attr("class", "node-label hop-number")
        .attr("dy", -30)
        .attr("text-anchor", "middle")
        .text(d => `–•–æ–ø ${d.hop}`)
        .attr("fill", "#2c3e50")
        .attr("font-weight", "bold");

    nodes.append("text")
        .attr("class", "node-label hostname")
        .attr("dy", -15)
        .attr("text-anchor", "middle")
        .text(d => d.hostname !== '*' ? d.hostname : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–∑–µ–ª')
        .attr("fill", "#34495e")
        .attr("font-size", "10px");

    nodes.append("text")
        .attr("class", "node-label ip-address")
        .attr("dy", 25)
        .attr("text-anchor", "middle")
        .text(d => d.ip)
        .attr("fill", "#7f8c8d")
        .attr("font-size", "9px")
        .attr("font-family", "monospace");

    nodes.append("text")
        .attr("class", "node-label rtt-info")
        .attr("dy", 40)
        .attr("text-anchor", "middle")
        .text(d => d.rtt1 ? `~${d.rtt1} ms` : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
        .attr("fill", "#e67e22")
        .attr("font-size", "8px");

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    const legend = container.append("div")
        .attr("class", "legend")
        .style("margin-top", "20px");

    legend.html(`
        <div class="legend-title"><strong>–õ–µ–≥–µ–Ω–¥–∞:</strong></div>
        <div class="legend-item">
            <span class="legend-color" style="background: #e74c3c"></span>
            <span>–ò—Å—Ç–æ—á–Ω–∏–∫ (–í–∞—à —Å–µ—Ä–≤–µ—Ä)</span>
        </div>
        <div class="legend-item">
            <span class="legend-color" style="background: #3498db"></span>
            <span>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —É–∑–ª—ã</span>
        </div>
        <div class="legend-item">
            <span class="legend-color" style="background: #27ae60"></span>
            <span>–¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª</span>
        </div>
    `);
}

function visualizePing(pingData) {
    elements.visualizationDiv.innerHTML = '';
    
    const container = d3.select("#visualization")
        .append("div")
        .attr("class", "ping-results");

    container.append("h4")
        .text("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Ping")
        .style("color", "#2c3e50")
        .style("margin-bottom", "20px");

    const statsContainer = container.append("div")
        .attr("class", "ping-stats-container");

    const stats = [
        { label: "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤", value: pingData.packets_transmitted, color: "#3498db" },
        { label: "üì• –ü–æ–ª—É—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤", value: pingData.packets_received, color: "#27ae60" },
        { label: "‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–∞–∫–µ—Ç–æ–≤", value: pingData.packet_loss, color: "#e74c3c" },
        { label: "‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", value: pingData.time_ms + " ms", color: "#9b59b6" },
        { label: "üöÄ RTT Min/Avg/Max", value: `${pingData.rtt_min}/${pingData.rtt_avg}/${pingData.rtt_max} ms`, color: "#f39c12" }
    ];

    stats.forEach(stat => {
        const statItem = statsContainer.append("div")
            .attr("class", "stat-item")
            .style("background", stat.color + "20")
            .style("border-left", `4px solid ${stat.color}`);

        statItem.append("div")
            .attr("class", "stat-label")
            .text(stat.label)
            .style("color", "#7f8c8d")
            .style("font-size", "12px");

        statItem.append("div")
            .attr("class", "stat-value")
            .text(stat.value)
            .style("color", "#2c3e50")
            .style("font-size", "16px")
            .style("font-weight", "bold");
    });
}

function visualizeRawData(data, commandType) {
    elements.visualizationDiv.innerHTML = '';
    
    const container = d3.select("#visualization")
        .append("div")
        .attr("class", "raw-data-container");

    const title = commandType === 'nmap' ? 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Nmap' : 
                 commandType === 'dns' ? 'üåê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DNS' : 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Netstat';
                 
    container.append("h4")
        .text(title)
        .style("color", "#2c3e50")
        .style("margin-bottom", "15px");

    container.append("pre")
        .attr("class", "raw-output-pre")
        .text(data.raw_output || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        .style("background", "#1e1e1e")
        .style("color", "#d4d4d4")
        .style("padding", "15px")
        .style("border-radius", "5px")
        .style("overflow", "auto")
        .style("max-height", "400px")
        .style("font-family", "'Courier New', monospace")
        .style("font-size", "12px");
}

// ===== HISTORY MANAGEMENT =====
async function loadHistory() {
    showLoading("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...");
    
    try {
        const response = await fetch('/api/history');
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
        
        commandHistory = data.history || [];
        displayHistory(commandHistory);
        elements.historyCount.textContent = commandHistory.length;
        
        hideLoading();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
        hideLoading();
    }
}

function displayHistory(history) {
    if (history.length === 0) {
        elements.historyList.innerHTML = `
            <div class="placeholder">
                <div class="placeholder-icon">‚è∞</div>
                <p>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞</p>
                <small>–í—ã–ø–æ–ª–Ω–∏—Ç–µ traceroute –∫–æ–º–∞–Ω–¥—ã —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é</small>
            </div>
        `;
        return;
    }

    const filteredHistory = filterAndSortHistory(history);
    
    elements.historyList.innerHTML = filteredHistory.map(item => `
        <div class="history-item" data-id="${item.id}">
            <div class="history-content">
                <div class="history-command">
                    <strong>${escapeHtml(item.command)}</strong>
                </div>
                <div class="history-details">
                    <span class="history-target">üéØ ${escapeHtml(item.target)}</span>
                    <span class="history-hops">üîó ${item.hops_count} —Ö–æ–ø–æ–≤</span>
                    <span class="history-time">‚è∞ ${formatDateTime(item.timestamp)}</span>
                </div>
            </div>
            <button class="history-load-btn" onclick="loadHistoryItem(${item.id})">
                üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å
            </button>
        </div>
    `).join('');
}

function filterAndSortHistory(history) {
    let filtered = history;
    const filterValue = elements.historyFilter.value;
    const sortValue = elements.historySort.value;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (filterValue !== 'all') {
        filtered = history.filter(item => 
            item.command.toLowerCase().includes(filterValue)
        );
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch (sortValue) {
        case 'oldest':
            filtered.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
            break;
        case 'target':
            filtered.sort((a, b) => a.target.localeCompare(b.target));
            break;
        default: // newest
            filtered.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }
    
    return filtered;
}

// ===== UTILITY FUNCTIONS =====
function showLoading(message = "–ó–∞–≥—Ä—É–∑–∫–∞...") {
    elements.loadingDetails.textContent = message;
    elements.loadingOverlay.style.display = 'block';
}

function hideLoading() {
    elements.loadingOverlay.style.display = 'none';
}

function showError(message) {
    elements.rawOutputDiv.innerHTML = `<div class="error">‚ùå ${message}</div>`;
    elements.visualizationDiv.innerHTML = '';
}

function showNodeInfo(event, data) {
    d3.select("#node-tooltip").remove();
    const tooltip = d3.select("body")
        .append("div")
        .attr("id", "node-tooltip")
        .attr("class", "node-tooltip")
        .style("position", "absolute");

    const [x, y] = d3.pointer(event);
    
    tooltip.html(`
        <div class="tooltip-header">
            <strong>${data.hostname !== '*' ? data.hostname : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–∑–µ–ª'}</strong>
        </div>
        <div class="tooltip-content">
            <p><strong>IP:</strong> <code>${data.ip}</code></p>
            <p><strong>–ù–æ–º–µ—Ä —Ö–æ–ø–∞:</strong> ${data.hop}</p>
            ${data.rtt1 ? `<p><strong>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ 1:</strong> ${data.rtt1} ms</p>` : ''}
            ${data.rtt2 ? `<p><strong>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ 2:</strong> ${data.rtt2} ms</p>` : ''}
            ${data.rtt3 ? `<p><strong>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ 3:</strong> ${data.rtt3} ms</p>` : ''}
            ${!data.rtt1 && !data.rtt2 && !data.rtt3 ? '<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚ùå –¢–∞–π–º–∞—É—Ç</p>' : ''}
        </div>
    `)
    .style("left", (x + 10) + "px")
    .style("top", (y - 28) + "px")
    .style("visibility", "visible");
}

function hideNodeInfo() {
    d3.select("#node-tooltip").remove();
}

function zoomIn() {
    if (zoomLevel < 2) {
        zoomLevel += 0.1;
        updateZoom();
    }
}

function zoomOut() {
    if (zoomLevel > 0.5) {
        zoomLevel -= 0.1;
        updateZoom();
    }
}

function resetView() {
    zoomLevel = 1;
    updateZoom();
}

function updateZoom() {
    const svg = d3.select(".traceroute-svg");
    if (!svg.empty()) {
        svg.style("transform", `scale(${zoomLevel})`);
    }
}

function copyOutputToClipboard() {
    const text = elements.rawOutputDiv.textContent;
    navigator.clipboard.writeText(text).then(() => {
        showTempMessage('üìã –í—ã–≤–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }).catch(err => {
        showError('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    });
}

function showTempMessage(message) {
    const tempMsg = document.createElement('div');
    tempMsg.className = 'info';
    tempMsg.textContent = message;
    tempMsg.style.position = 'fixed';
    tempMsg.style.top = '20px';
    tempMsg.style.right = '20px';
    tempMsg.style.zIndex = '1000';
    
    document.body.appendChild(tempMsg);
    
    setTimeout(() => {
        document.body.removeChild(tempMsg);
    }, 3000);
}

// ===== MODAL FUNCTIONS =====
function showClearHistoryModal() {
    elements.confirmModal.style.display = 'block';
}

function closeModal() {
    elements.confirmModal.style.display = 'none';
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatDateTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleString('ru-RU');
}

function handleKeyboardShortcuts(event) {
    if (event.ctrlKey && event.key === 'Enter') {
        event.preventDefault();
        elements.form.dispatchEvent(new Event('submit'));
    }
    
    if (event.key === 'Escape') {
        closeModal();
    }
}

// ===== PATHS VISUALIZATION =====
async function loadPaths() {
    showLoading("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –ø—É—Ç–µ–π...");
    
    try {
        const response = await fetch('/api/paths');
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Ç–µ–π');
        }
        
        networkPaths = data.paths || {};
        visualizePaths(networkPaths);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const targets = Object.keys(networkPaths).length;
        const hops = Object.values(networkPaths).reduce((acc, path) => acc + path.length, 0);
        const ips = Object.values(networkPaths).reduce((acc, path) => 
            acc + path.reduce((ipAcc, hop) => ipAcc + hop.ips.length, 0), 0);
        
        elements.totalTargets.textContent = targets;
        elements.totalHops.textContent = hops;
        elements.totalIPs.textContent = ips;
        elements.pathsCount.textContent = targets;
        
        hideLoading();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Ç–µ–π:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ –ø—É—Ç–µ–π');
        hideLoading();
    }
}

function visualizePaths(paths) {
    if (Object.keys(paths).length === 0) {
        elements.pathsContainer.innerHTML = `
            <div class="placeholder">
                <div class="placeholder-icon">üåç</div>
                <p>–î–µ—Ä–µ–≤–æ –ø—É—Ç–µ–π —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ traceroute</p>
                <small>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ traceroute –∫–æ–º–∞–Ω–¥ —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É —Å–µ—Ç–∏</small>
            </div>
        `;
        return;
    }

    elements.pathsContainer.innerHTML = '';
    
    Object.entries(paths).forEach(([target, hops]) => {
        const targetContainer = d3.select(elements.pathsContainer)
            .append('div')
            .attr('class', 'path-target');
        
        targetContainer.append('h4')
            .text(`üéØ –¶–µ–ª—å: ${target}`)
            .style('color', '#2c3e50')
            .style('margin-bottom', '15px');
        
        const treeContainer = targetContainer.append('div')
            .attr('class', 'path-tree');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É
        hops.sort((a, b) => a.hop_number - b.hop_number);
        
        hops.forEach(hop => {
            const hopNode = treeContainer.append('div')
                .attr('class', 'path-hop')
                .style('margin-left', `${(hop.hop_number - 1) * 30}px`);
            
            hopNode.append('div')
                .attr('class', 'hop-header')
                .html(`<strong>–•–æ–ø ${hop.hop_number}</strong>`);
            
            if (hop.nodes.length > 0 || hop.ips.length > 0) {
                const contentNode = hopNode.append('div')
                    .attr('class', 'hop-content');
                
                if (hop.nodes.length > 0) {
                    contentNode.append('div')
                        .attr('class', 'hop-hosts')
                        .html(`<strong>–•–æ—Å—Ç—ã:</strong> ${hop.nodes.join(', ')}`);
                }
                
                if (hop.ips.length > 0) {
                    contentNode.append('div')
                        .attr('class', 'hop-ips')
                        .html(`<strong>IP:</strong> ${hop.ips.join(', ')}`);
                }
            } else {
                hopNode.append('div')
                    .attr('class', 'hop-empty')
                    .text('‚ùå –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–∑–µ–ª');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            if (hop.hop_number > 1) {
                hopNode.style('border-left', '2px dashed #3498db')
                       .style('padding-left', '15px')
                       .style('margin-top', '10px');
            }
        });
    });
}

// ===== HISTORY ITEM LOADING =====
async function loadHistoryItem(requestId) {
    showLoading("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...");
    
    try {
        const response = await fetch(`/api/history/${requestId}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–∏–¥
        showView('main');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        elements.commandInput.value = data.command;
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        const responseData = {
            command: data.command,
            command_type: 'traceroute',
            parsed_data: data.hops,
            raw_stdout: `–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: ${data.command}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleString()}\n\n` +
                       data.hops.map(hop => 
                           `–•–æ–ø ${hop.hop}: ${hop.hostname} (${hop.ip}) ${hop.rtt1 ? hop.rtt1 + 'ms' : 'timeout'}`
                       ).join('\n')
        };
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayRawOutput(responseData);
        visualizeCommandData(responseData);
        
        hideLoading();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
        hideLoading();
    }
}

// ===== HISTORY CLEARING =====
async function clearHistory() {
    closeModal();
    showLoading("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...");
    
    try {
        const response = await fetch('/api/clear_history', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await loadHistory();
        showTempMessage('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    }
}

// ===== EXPORT FUNCTIONS =====
function exportPaths() {
    if (Object.keys(networkPaths).length === 0) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    const dataStr = JSON.stringify(networkPaths, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `network-paths-${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
    
    showTempMessage('üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON');
}

function exportHistory() {
    if (commandHistory.length === 0) {
        showError('–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    const dataStr = JSON.stringify(commandHistory, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `network-history-${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
    
    showTempMessage('üíæ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ JSON');
}

// ===== QUICK ACTIONS =====
function quickAction(type) {
    const target = prompt(`–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è ${type}:`, "google.com");
    if (target) {
        let command;
        switch (type) {
            case 'traceroute':
                command = `traceroute ${target}`;
                break;
            case 'ping':
                command = `ping -c 4 ${target}`;
                break;
            case 'nmap':
                command = `nmap -sn ${target}`;
                break;
            default:
                command = `${type} ${target}`;
        }
        elements.commandInput.value = command;
        elements.form.dispatchEvent(new Event('submit'));
    }
}

// ===== SYSTEM FUNCTIONS =====
async function loadNetworkInfo() {
    try {
        const response = await fetch('/api/network_info');
        const data = await response.json();
        
        if (response.ok) {
                        updateNetworkStatus('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        } else {
            updateNetworkStatus('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏:', error);
        updateNetworkStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
}

function updateNetworkStatus(status) {
    elements.systemStatus.textContent = status;
}

function updateUptime() {
    const now = new Date();
    const uptime = now - appStartTime;
    const hours = Math.floor(uptime / 3600000);
    const minutes = Math.floor((uptime % 3600000) / 60000);
    const seconds = Math.floor((uptime % 60000) / 1000);
    
    elements.appUptime.textContent = 
        `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

async function checkSystemStatus() {
    try {
        const response = await fetch('/api/network_info', { 
            method: 'HEAD',
            timeout: 5000 
        });
        
        if (response.ok) {
            updateNetworkStatus('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        } else {
            updateNetworkStatus('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
        }
    } catch (error) {
        updateNetworkStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
}

function updateInfoStats() {
    elements.totalRequests.textContent = commandHistory.length;
    elements.dbSize.textContent = '~' + Math.round(commandHistory.length * 0.5) + ' KB';
}

function autoSaveState() {
    const state = {
        lastCommand: elements.commandInput.value,
        zoomLevel: zoomLevel,
        currentView: currentView,
        timestamp: new Date().toISOString()
    };
    localStorage.setItem('networkVisualizerState', JSON.stringify(state));
}

function loadSavedState() {
    try {
        const saved = localStorage.getItem('networkVisualizerState');
        if (saved) {
            const state = JSON.parse(saved);
            elements.commandInput.value = state.lastCommand || '';
            zoomLevel = state.zoomLevel || 1;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º view –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            if (state.currentView && state.currentView !== currentView) {
                showView(state.currentView);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

// ===== ADVANCED VISUALIZATION FUNCTIONS =====
function createNetworkGraph() {
    if (Object.keys(networkPaths).length === 0) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ —Å–µ—Ç–∏');
        return;
    }

    showLoading("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–µ—Ç–∏...");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    elements.visualizationDiv.innerHTML = '';
    const container = d3.select("#visualization")
        .append("div")
        .attr("class", "network-graph-container");
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å–µ—Ç–∏
    // —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º force-directed layout –∏–∑ D3.js
    
    setTimeout(() => {
        hideLoading();
        showTempMessage('üìä –ì—Ä–∞—Ñ —Å–µ—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω');
    }, 1000);
}

function analyzeNetworkPatterns() {
    if (commandHistory.length < 2) {
        showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
    }

    showLoading("–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...");
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ö–æ–ø–æ–≤
    const commonHops = findCommonHops();
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    const rttAnalysis = analyzeRTT();
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    createAnalysisReport(commonHops, rttAnalysis);
    
    hideLoading();
}

function findCommonHops() {
    const hopCounts = {};
    
    commandHistory.forEach(request => {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–∏–µ —Ö–æ–ø—ã
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    });
    
    return Object.entries(hopCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);
}

function analyzeRTT() {
    const rttStats = {
        min: Infinity,
        max: 0,
        total: 0,
        count: 0
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º RTT –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
    commandHistory.forEach(request => {
        // –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RTT
    });
    
    return {
        average: rttStats.total / rttStats.count,
        min: rttStats.min,
        max: rttStats.max
    };
}

function createAnalysisReport(commonHops, rttAnalysis) {
    const report = `
        <div class="analysis-report">
            <h4>üìà –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</h4>
            <div class="report-section">
                <h5>üèÜ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Ö–æ–ø—ã</h5>
                <ul>
                    ${commonHops.map(([hop, count]) => 
                        `<li>${hop}: ${count} —Ä–∞–∑</li>`
                    ).join('')}
                </ul>
            </div>
            <div class="report-section">
                <h5>‚è±Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RTT</h5>
                <p>–°—Ä–µ–¥–Ω–µ–µ: ${rttAnalysis.average.toFixed(2)}ms</p>
                <p>–ú–∏–Ω–∏–º—É–º: ${rttAnalysis.min}ms</p>
                <p>–ú–∞–∫—Å–∏–º—É–º: ${rttAnalysis.max}ms</p>
            </div>
        </div>
    `;
    
    elements.visualizationDiv.innerHTML = report;
}

// ===== UTILITY ENHANCEMENTS =====
function filterHistory() {
    if (commandHistory.length > 0) {
        displayHistory(commandHistory);
    }
}

function searchInHistory(query) {
    const filtered = commandHistory.filter(item =>
        item.command.toLowerCase().includes(query.toLowerCase()) ||
        item.target.toLowerCase().includes(query.toLowerCase())
    );
    displayHistory(filtered);
}

function exportCurrentView() {
    let exportData;
    let filename;
    
    switch (currentView) {
        case 'main':
            exportData = elements.rawOutputDiv.textContent;
            filename = `network-output-${new Date().toISOString().split('T')[0]}.txt`;
            downloadTextFile(exportData, filename);
            break;
        case 'history':
            exportHistory();
            break;
        case 'paths':
            exportPaths();
            break;
    }
}

function downloadTextFile(content, filename) {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();
    
    URL.revokeObjectURL(url);
    showTempMessage('üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
}

// ===== PERFORMANCE OPTIMIZATIONS =====
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const optimizedFilterHistory = debounce(filterHistory, 300);
const optimizedSearch = debounce(searchInHistory, 500);

// ===== ERROR HANDLING ENHANCEMENTS =====
function setupGlobalErrorHandling() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    window.addEventListener('error', function(e) {
        console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', e.error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
    window.addEventListener('unhandledrejection', function(e) {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', e.reason);
        showError('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
    });
}

function validateCommand(command) {
    const forbiddenPatterns = [
        /[;&|`$<>]/g, // –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        /rm\s+-/g,    // –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
        /mv\s+\/\s/g,  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        /dd\s+if/g     // –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    ];
    
    for (const pattern of forbiddenPatterns) {
        if (pattern.test(command)) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
        }
    }
    
    return true;
}

// ===== INITIALIZATION ENHANCEMENTS =====
function setupServiceWorker() {
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                            })
            .catch(error => {
                            });
    }
}

function setupOfflineDetection() {
    window.addEventListener('online', function() {
        showTempMessage('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        elements.systemStatus.textContent = '‚úÖ –û–Ω–ª–∞–π–Ω';
    });
    
    window.addEventListener('offline', function() {
        showError('üì∂ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        elements.systemStatus.textContent = '‚ùå –û—Ñ–ª–∞–π–Ω';
    });
}

// ===== FINAL INITIALIZATION =====
function completeInitialization() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    loadSavedState();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    setupGlobalErrorHandling();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ offline/online
    setupOfflineDetection();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Service Worker
    setupServiceWorker();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º welcome message
    setTimeout(() => {
        showTempMessage('üöÄ Network Visualizer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }, 1000);
    
    }

// –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
completeInitialization();

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø HTML =====
window.loadHistoryItem = loadHistoryItem;
window.quickAction = quickAction;
window.exportCurrentView = exportCurrentView;
window.searchInHistory = optimizedSearch;

console.log('‚úÖ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è script.js –∑–∞–≥—Ä—É–∂–µ–Ω–∞');